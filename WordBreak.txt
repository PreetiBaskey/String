// 1st approach | using recursion
// Time complexity :- O(2^n.m)
// Space complexity :- O(n+u)


#include<iostream>
#include<vector>
#include<algorithm>
#include<unordered_set>
using namespace std;

unordered_set<string> st;

bool solve(int idx, string &s) {
    int n = s.size();
    if(idx == n) {
        return true;
    }
    if(st.find(s) != st.end()) {
        return true;
    }
    for(int l = 1; l <= n; l++) {
        string temp = s.substr(idx, l);
        if(st.find(temp) != st.end() && solve(idx + l, s)) {
            return true;
        }
    }
    return false;
}

int main() {
    
    int n;
    string s;
    cout<<"Enter the size of the dictionary :- ";
    cin>>n;
    vector<string> dictionary(n);
    cout<<"Enter the dictionary strings."<<endl;
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i<<" th string :- ";
        cin>>dictionary[i];
    }
    for(string &word: dictionary) {
        st.insert(word);
    }
    cout<<"Enter a string, on which you want to check on :- ";
    cin>>s;
    
    bool result = solve(0, s);
    if(result) {
        cout<<s<<" is found !!";
    }
    else {
        cout<<s<<" is not found !!";
    }
    
    return 0;
}
