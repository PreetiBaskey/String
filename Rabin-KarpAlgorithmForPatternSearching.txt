// 1st approach | brute force | using unordered_map
// Time complexity :- O((n - m + 1) * m) â‰ˆ O(n * m)
                        n - m + 1 = while loop
                        m = length of the PATTERN (m times)
// Space complexity :- O(n)

#include<iostream>
#include<vector>
#include<unordered_map>
using namespace std;

vector<int> getPattern(string &text, string &pattern) {
    int m = pattern.size();
    int n = text.size();
    vector<char> c = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    unordered_map<char, int> mp;
    vector<int> result;
    for(int i = 0; i < c.size(); i++) {
        mp[c[i]] = i + 1;
    }
    int ws = pattern.size();
    int patMapVal = 0;
    for(int i = 0; i < m; i++) {
        patMapVal += mp[pattern[i]];
    }
    int l = 0, r = ws - 1;
    int txtMapVal = 0;
    for(int i = 0; i < m; i++) {
        txtMapVal += mp[c[i]];
    }
    while(l <= n - m) {
        if(patMapVal == txtMapVal) {
            int i;
            for(i = 0; i < m; i++) {
                if(pattern[i] != text[i]) {
                    break;
                }
            }
            if(i == m) {
                result.push_back(l + 1);
            }
        }
        txtMapVal = (txtMapVal - mp[text[l]] + mp[text[r + 1]]);
        l = l + 1;
        r = r + 1;
    }
    
    return result;
}

int main() {
    
    string text, pattern;
    vector<int> result;
    cout<<"Enter a text :- ";
    cin>>text;
    cout<<"Enter a pattern :- ";
    cin>>pattern;
    result = getPattern(text, pattern);
    cout<<pattern<<" is found at index ";
    for(int &idx: result) {
        cout<<idx<<" ";
    }
    
    return 0;
}
