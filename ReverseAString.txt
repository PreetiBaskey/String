// 1st approach | using 2 pointers and swapping
// time complexity :- O(N)
// space complexity :- O(1)

#include<iostream>
using namespace std;

int main() {
    
    string s;
    cout<<"Enter a string :- ";
    cin>>s;
    int i = 0, j = s.size() - 1;
    while(i <= j) {
        swap(s[i], s[j]);
        i++;
        j--;
    }
    cout<<"Reverse of "<<s<<" is :- ";
    for(int i = 0; i < s.size(); i++) {
        cout<<s[i];
    }
    
    return 0;
}


// 2nd approach | using stack
// time complexity :- O(N)
// space complexity :- O(N)

#include<iostream>
#include<stack>
using namespace std;

int main() {
    
    string s;
    cout<<"Enter a string :- ";
    cin>>s;
    stack<int> st;
    
    for(int i = 0; i < s.size(); i++) {
        st.push(s[i]);
    }
    cout<<"Reverse of "<<s<<" is :- ";
    while(!st.empty()) {
        char ele = st.top();
        st.pop();
        cout<<ele;
    }
    
    return 0;
}


// 3rd approach | using recursion
// time complexity :- O(N)
// space complexity :- O(N)

#include<iostream>
using namespace std;

void reverse(string &s, int i, int j) {
    if(i <= j) {
        swap(s[i], s[j]);
        i++; j--;
        reverse(s, i, j);
    }
}

int main() {
    
    string s;
    cout<<"Enter a string :- ";
    cin>>s;
    
    int i = 0, j = s.size() - 1;
    reverse(s, i, j);
    cout<<"Reverse of "<<s<<" is :- ";
    for(char ch: s) {
        cout<<ch;
    }
    
    return 0;
}
