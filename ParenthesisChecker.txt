// 1st approach | using stack
// Time complexity :- O(N)
// Space complexity :- O(N)


#include<iostream>
#include<stack>
using namespace std;

bool isBalanced(string &s) {
    int n = s.size();
    if(n == 0) {
        return false;
    }
    stack<char> st;
    for(char ch = 0; ch < n; ch++) {
        if(s[ch] == '(' || s[ch] == '{' || s[ch] == '[') {
            st.push(s[ch]);
        }
        else {
            if(st.size() == 0) {
                return false;
            }
            else if(s[ch] == ')' && st.top() != '(') {
                return false;
            }
            else if(s[ch] == ']' && st.top() != '[') {
                return false;
            }
            else if(s[ch] == '}' && st.top() != '{') {
                return false;
            }
            st.pop();
        }
    }
    if(st.size() == 0) {
        return true;
    }
    else {
        return false;
    }
} 

int main() {
    
    string s;
    cout<<"Enter a string :- ";
    cin>>s;
    bool result = isBalanced(s);
    if(result) {
        cout<<"String is balanced !!";
    }
    else {
        cout<<"String is not balanced !!";
    }
    
    return 0;
}
