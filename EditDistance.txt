// 1st approach | using recursion
// Time complexity :- O(3^(m + n))
// Space complexity :- O(m + n)

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int editDistance(string &s1, string &s2, int i, int j) {
    int m = s1.size();
    int n = s2.size();
    
    if(i == m) {
        return n - j;
    }
    else if(j == n) {
        return m - i;
    }
    
    if(s1[i] == s2[j]) {
        return editDistance(s1, s2, i + 1, j + 1);
    }
    int insert = 1 + editDistance(s1, s2, i, j + 1);
    int dele = 1 + editDistance(s1, s2, i + 1, j);
    int replace = 1 + editDistance(s1, s2, i + 1, j + 1);
    
    return min({insert, dele, replace});
}

int main() {
    
    string s1, s2;
    cout<<"Enter first word :- ";
    cin>>s1;
    cout<<"Enter second word :- ";
    cin>>s2;
    
    int result = editDistance(s1, s2, 0, 0);
    cout<<"Minimum distance is :- "<<result;
    
    return 0;
}




// 2nd approach | using recursion + memoization | dp
// Time complexity :- O(m × n)
// Space complexity :- O(m × n)


#include<iostream>
#include<vector>
#include<algorithm>
#include<cstring>
using namespace std;
int dp[501][501];

int editDistance(string &s1, string &s2, int i, int j) {
    int m = s1.size();
    int n = s2.size();
    
    if(i == m) {
        return n - j;
    }
    else if(j == n) {
        return m - i;
    }
    if(dp[i][j] != -1) {
        return dp[i][j];
    }
    if(s1[i] == s2[j]) {
        return dp[i][j] = editDistance(s1, s2, i + 1, j + 1);
    }
    int insert = 1 + editDistance(s1, s2, i, j + 1);
    int dele = 1 + editDistance(s1, s2, i + 1, j);
    int replace = 1 + editDistance(s1, s2, i + 1, j + 1);
    
    return dp[i][j] = min({insert, dele, replace});
}

int main() {
    
    string s1, s2;
    cout<<"Enter first word :- ";
    cin>>s1;
    cout<<"Enter second word :- ";
    cin>>s2;
    memset(dp, -1, sizeof(dp));
    
    int result = editDistance(s1, s2, 0, 0);
    cout<<"Minimum distance is :- "<<result;
    
    return 0;
}
