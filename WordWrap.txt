// 1st approach | using recursion + memoization | dp
// Time complexity :- O(N*K)
// Space complexity :- O(N*K)

#include<iostream>
#include<vector>
#include<cstring>
using namespace std;
int dp[505][2005];

int findMinCost(int i, int rem, vector<int> &arr, int &k) {
    
    if(i == arr.size()) {
        return 0;
    }
    if(dp[i][rem] != -1) {
        return dp[i][rem];
    }
    
    int ans;
    if(arr[i] > rem) {
        ans = (rem + 1) * (rem + 1) + findMinCost(i + 1, k - arr[i]- 1, arr, k);
    }
    else {
        int choice1 = (rem + 1) * (rem + 1) + findMinCost(i + 1, k - arr[i] - 1, arr, k);
        int choice2 = findMinCost(i + 1, rem - arr[i] - 1, arr, k);
        ans = min(choice1, choice2);
    } 
    dp[i][rem] = ans;
    return dp[i][rem];
}

int main() {
    
    vector<int> arr;
    int n, k, result;
    memset(dp, -1, sizeof(dp));
    cout<<"Enter array size :- ";
    cin>>n;
    arr.resize(n);
    cout<<"Enter number of characters, that can be put in one line :- ";
    cin>>k;
    cout<<"Enter the values of array :- ";
    for(int i = 0; i < n; i++) {
        cin>>arr[i];
    }
    result = findMinCost(0, k, arr, k);
    cout<<"Minimum cost is :- "<<result;
    
    return 0;
}
