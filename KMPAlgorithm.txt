#include<iostream>
#include<vector>
using namespace std;

void computeLPS(string &pattern, vector<int> &LPS, int M) {
    int length = 0;
    LPS[0] = 0;
    int i = 1;
    while(i < M) {
        if(pattern[i] == pattern[length]) {
            length++;
            LPS[i] = length;
            i++;
        }
        else {
            if(length != 0) {
                length = LPS[length - 1];
            }
            else {
                LPS[i] = 0;
                i++;
            }
        }
    }
}

vector<int> search(string &text, string &pattern) {
    int N = text.size();
    int M = pattern.size();
    vector<int> result;
    
    vector<int> LPS(M, 0);
    computeLPS(pattern, LPS, M);
    
    int i = 0, j = 0;
    while(i < N) {
        if(text[i] == pattern[j]) {
            i++;
            j++;
        }
        if(j == M) {
            result.push_back(i - M);
            j = LPS[j - 1];
        }
        else if(text[i] != pattern[j]) {
            if(j != 0) {
                j = LPS[j - 1];
            }
            else {
                i++;
            }
        }
    }
    
    return result;
}

int main() {
    
    string text, pattern;
    cout<<"Enter a text :- ";
    cin>>text;
    cout<<"Enter a pattern :- ";
    cin>>pattern;
    
    vector<int> result = search(text, pattern);
    for(int data: result) {
        cout<<data<<" ";
    }
    
    return 0;
}
